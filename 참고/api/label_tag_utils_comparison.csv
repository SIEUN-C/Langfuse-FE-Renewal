Area / Module,File / Symbol,Purpose,Affects (row set),Input Params,DB Operation,Uniqueness / Rule,Called By,Cache / Locks,Edge / Errors,Concurrency Notes,Example Before → After
Labels — removeLabelsFromPreviousPromptVersions,server/utils/updatePromptLabels.ts :: removeLabelsFromPreviousPromptVersions,Ensure label uniqueness across prompt *name* by removing specified labels from older versions when a new version is labeled.,"All versions with same (projectId, promptName) that currently have any of labelsToRemove","projectId, promptName, labelsToRemove[]","Find many prompts; for each, UPDATE labels = labels - labelsToRemove","Per name per label -> at most one version may carry a given label (e.g., 'production', 'latest')","createPrompt(), updatePrompt() (label setting), setLabels (router)",No lock in util itself; callers lock & invalidate via PromptService,Function returns ops; dependency checks handled by callers before invoking,Upstream uses SELECT ... FOR UPDATE or external lock to serialize label moves,"v3:[prod], v4:[beta] + set v5:[prod] → v3 loses [prod], v5 gains [prod]"
Tags — updatePromptTagsOnAllVersions,server/utils/updatePromptTags.ts :: updatePromptTagsOnAllVersions,Keep *tags* consistent across all versions of a given prompt name.,"All versions with same (projectId, promptName)","projectId, promptName, tags[]",Find all versions; UPDATE tags = unique(tags) for each version,Tags are *not* version-unique; they are normalized and identical across versions,createPrompt() when tags change; updateTags (router),No lock in util; callers lock & invalidate via PromptService before/after batch update,Empty set -> no-ops; tags are de-duplicated with Set(),Callers wrap in transaction or take cache lock to prevent stale reads,"v3:['team-a'], v4:['team-a','nlp'] + update ['team-b'] → v3,v4:['team-b']"
Protected Labels — checkHasProtectedLabels,server/utils/checkHasProtectedLabels.ts :: checkHasProtectedLabels,Detect if any labels to add/remove are protected; enforce admin/owner-only mutations.,N/A (read-only),"projectId, labelsToCheck[]",SELECT promptProtectedLabels by project; compute intersection,Cannot add/remove protected labels without scope 'promptProtectedLabels:CUD' and entitlement 'prompt-protected-labels',"prompts.create, prompts.delete(versions), prompts.setLabels, deletePrompt, deleteVersion",None (pure read),If protected label found and caller lacks scope -> 403; 'latest' cannot be protected (guarded in addProtectedLabel),Consistent read; protection list small,Trying to remove label 'production' when protected → 403 Forbidden
Router — setLabels (version),server/routers/promptRouter.ts :: setLabels,Overwrite the label set on a specific prompt version; remove those labels from other versions of same name.,Target version + any versions sharing any of the new labels,"promptId, projectId, labels[] (deduped)",UPDATE target.labels = newLabels; UPDATE others.labels = labels - newLabels,Maintains 1-label-per-name invariant; also checks protected labels and dependency safety for *removed* labels,UI: SetPromptVersionLabels popover (detail & history),PromptService.lockCache → invalidate → tx → unlock,If removing a label that is referenced by dependency graph → 409 CONFLICT with dependency list,Transactionally consistent; cache invalidated once,"v4:['staging'], v5:['prod'] + set v6:['prod','canary'] → v5 loses 'prod', v6 gets ['prod','canary']"
Router — updateTags (all versions),server/routers/promptRouter.ts :: updateTags,Set the tag set for every version of a prompt name at once.,"All versions with same (projectId, name)","projectId, name, tags[]",UPDATE many; tags set to provided list across all versions,Tags are shared across versions; caller must hold 'objects:tag' scope,UI: TagPromptPopover / TagPromptDetailsPopover,PromptService.lockCache → invalidate → updateMany → unlock,None specific; webhook 'updated' per affected version,Batch update; cache prevents stale reads,All versions tags normalized to the same set
Creation — createPrompt (labels & tags side-effects),server/actions/createPrompt.ts :: createPrompt,"Create new version; always adds 'latest'; optionally labels (e.g., 'production'); move labels off previous; synchronize tags across versions when changed.",New version + prior versions for labels/tags,"projectId, name, type, prompt, labels?, tags?, config, createdBy, commitMessage",INSERT prompt; INSERT dependencies; (optional) UPDATE prior versions via utilities,'latest' auto-add; label uniqueness per name; tag uniformity per name; type cannot change across versions,UI NewPromptForm / Public POST /v2/prompts,PromptService.lockCache → invalidate → tx → unlock,Protected labels check; variable/placeholder conflicts for chat; type mismatch with prior → 400; Prisma P2002 on high concurrency,Graph build/validate; cache key fan-out invalidated,Create v5 with ['production'] → v3 loses 'production'; all tags unified
